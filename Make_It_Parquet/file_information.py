#! /usr/bin/env python3

from pathlib import Path
import os
import stat
from dataclasses import dataclass


@dataclass
class FileInfo:
    path: Path
    stat_obj: os.stat_result
    file_name: str
    file_size: int
    file_extension: str
    file_or_directory: str


def resolve_path(input: Path | os.DirEntry[str]) -> Path:
    """Resolves input path."""
    if isinstance(input, Path):
        return input.resolve()
    else:
        return Path(input.path).resolve()


def get_file_stat(
    input: Path | os.DirEntry[str], resolved_path: Path
) -> os.stat_result:
    """Creates a file stat of the target file, which can be submitted as a path or an os.DirEntry object.

    Args:
        input: The target file in the form of a Path or os.DirEntry.
        resolved_path: Resolved path to be used instead of user entered path if object passed is a path.

    Returns:
        os.stat_result
    """
    if isinstance(input, Path):
        return resolved_path.stat()
    else:
        return input.stat()


def file_or_dir_from_stat(stat_obj: os.stat_result) -> str:
    """Determines if an os.stat_result object represents a file or directory."""
    return "file" if stat.S_ISREG(stat_obj.st_mode) else "directory"


def create_file_info(input: Path | os.DirEntry[str]) -> FileInfo:
    """Creates an info dataclass for the given input path."""
    path = resolve_path(input)
    stat_obj = get_file_stat(input, path)
    file_name = path.name
    file_size = stat_obj.st_size
    file_extension = path.suffix
    file_or_directory = file_or_dir_from_stat(stat_obj)
    file_info = FileInfo(
        path, stat_obj, file_name, file_size, file_extension, file_or_directory
    )
    return file_info


# TODO: (13-Feb-2025) Implement below when needed. DO NOT DELETE.


# # def replacer(match: re.Match) -> str: TODO: find out where this originally went.
# def replacer(input_ext: str, match: re.Match) -> str:
#     """
#     Replace the matched string in the input extension with the correct case.
#
#     Args:
#     match: re.Match
#         The matched string.
#
#     Returns:
#     str:
#         The matched string with the correct case.
#     """
#     orig = match.group()
#     if orig.isupper():
#         return input_ext.upper()
#     elif orig.islower():
#         return input_ext.lower()
#     elif orig[0].isupper() and orig[1:].islower():
#         return input_ext.capitalize()
#     else:
#         return input_ext
#
#
# def replace_alias_in_string(self) -> str:
#     """
#     Replace the matched string in the input extension with the correct case.
#
#     This method takes in the input extension and returns the same extension
#     with the correct case. If the extension is not found in the string, the
#     original string is returned.
#
#     Args:
#         self (str): The input extension.
#
#     Returns:
#         str: The matched string with the correct case.
#     """
#     pattern = re.compile(re.escape(self.input_ext), re.IGNORECASE)
#     result, count = pattern.subn(replacer, self.input_ext)
#     if count == 0:
#         result = f"{self.input_ext}"
#     return result
#
#
# def generate_output_name(self) -> str:
#     """
#     Generate a name for the output file.
#
#     If the input extension is present in the input file name (case-insensitive),
#     the output name is generated by replacing the input extension with the
#     correct case. Otherwise, the output name is generated by appending the
#     output extension to the input file name.
#
#     Returns:
#         str: The generated output name.
#     """
#     if self.input_ext and self.input_ext.lower() in self.input_path.name.lower():
#         return self._replace_alias_in_string()
#     else:
#         return f"{self.input_path.name}_{self.output_ext}"
#
#
# def generate_output_path(input_path: Path, output_ext: str) -> Path:
#     """
#     Generate a path for the output file.
#
#     Args:
#         input_path (Path): The path to the input file.
#         output_ext (str): The output file extension.
#
#     Returns:
#         Path: The path to the output file.
#     """
#     return input_path.with_suffix(f".{output_ext}")
